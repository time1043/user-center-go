syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

// The greeting service definition.
service RealWorld {
  // Login
  rpc Login (LoginRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/api/users/login",
      body: "*",
    };
  }

  // Register
  rpc Register (RegisterRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/api/users",
      body: "*",
    };
  }

  // Get current user profile
  rpc GetCurrentUser (GetCurrentUserRequest) returns (UserReply) {
    option (google.api.http) = {
      get: "/api/user",
    };
  }

  // Update user profile
  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "/api/user",
      body: "*",
    };
  }

  // Get profile
  rpc GetProfile (GetProfileRequest) returns (ProfileReply) {
    option (google.api.http) = {
      get: "/api/profiles/{username}",
    };
  }

  // Follow user
  rpc FollowUser (FollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      post: "/api/profiles/{username}/follow",
      body: "*",
    };
  }

  // Unfollow user
  rpc UnfollowUser (UnfollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      delete: "/api/profiles/{username}/follow",
    };
  }

  // List articles
  rpc ListArticles (ListArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles",
    };
  }

  // Feed articles
  rpc FeedArticles (FeedArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles/feed",
    };
  }

  // Get article
  rpc GetArticle (GetArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}",
    };
  }

  // Create article
  rpc CreateArticle (CreateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles",
      body: "*",
    };
  }

  // Update article
  rpc UpdateArticle (UpdateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      put: "/api/articles/{slug}",
      body: "*",
    };
  }

  // Delete article
  rpc DeleteArticle (DeleteArticleRequest) returns (EmptyReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}",
    };
  }

  // Add comment to an article
  rpc AddComment (AddCommentRequest) returns (SingleCommentReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments",
      body: "*",
    };
  }

  // Get comments from an article
  rpc GetComments (GetCommentsRequest) returns (MultipleCommentsReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments",
    };
  }

  // Delete comment from an article
  rpc DeleteComment (DeleteCommentRequest) returns (EmptyReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}",
    };
  }

  // Favorite article
  rpc FavoriteArticle (FavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite",
      body: "*",
    };
  }

  // Unfavorite article
  rpc UnfavoriteArticle (UnfavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite",
    };
  }

  // Get tags
  rpc GetTags (GetTagsRequest) returns (TagListReply) {
    option (google.api.http) = {
      get: "/api/tags",
    };
  }
}


// Request message
message LoginRequest {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

message GetCurrentUserRequest {}

message UpdateUserRequest {
  message User {
    string email = 1;
    string username = 2;
    string password = 3;
    string image = 4;
    string bio = 5;
  }
  User user = 1;
}

message GetProfileRequest {
  string username = 1;
}

message FollowUserRequest {
  string username = 1;
}


message UnfollowUserRequest {
  string username = 1;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64 limit = 4;
  int64 offset = 5;
}

message FeedArticlesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message GetArticleRequest {
  string slug = 1;
}

message CreateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tag_list = 4;
  }
  Article article = 1;
}

message UpdateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tag_list = 4;
  }
  string slug = 1;
  Article article = 2;
}

message DeleteArticleRequest {
  string slug = 1;
}

message AddCommentRequest {
  message Comment {
    string body = 1;
  }
  string slug = 1;
  Comment comment = 2;
}

message GetCommentsRequest {
  string slug = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  uint32 id = 2;
}

message FavoriteArticleRequest {
  string slug = 1;
}

message UnfavoriteArticleRequest {
  string slug = 1;
}

message GetTagsRequest {}

message EmptyReply {}


// Reply message
message UserReply {
  message User {
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }
  User user = 1;
}

message ProfileReply {
  message Profile {
    string username = 1;
    string bio = 2;
    string image = 3; 
    bool following = 4;
  }
  Profile profile = 1;
}

message SingleArticleReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  message Article {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tag_list = 5;
    string created_at = 6;
    string updated_at = 7;
    bool favorited = 8;
    uint32 favorites_count = 9;
    Author author = 10;
  }
  Article article = 1;
}

message MultipleArticlesReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  message Articles {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tag_list = 5;
    string created_at = 6;
    string updated_at = 7;
    bool favorited = 8;
    uint32 favorites_count = 9;
    Author author = 10;
  }
  repeated Articles articles = 1;
  uint32 articles_count = 2;
}

message SingleCommentReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  message Comment {
    uint32 id = 1;
    string created_at = 2;
    string updated_at = 3;
    string body = 4;
    Author author = 5;
  }
  Comment comment = 1;
}

message MultipleCommentsReply {
  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  message Comments {
    uint32 id = 1;
    string created_at = 2;
    string updated_at = 3;
    string body = 4;
    Author author = 5;
  }
  repeated Comments comments = 1;
}

message TagListReply {
  repeated string tags = 1;
}
